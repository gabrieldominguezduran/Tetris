{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/usePlayer.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/StartButton.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js","img/tetris.jpg"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","mtrx","map","_","index","column","row","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","cell","forEach","value","reduce","ack","findIndex","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","console","log","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a83d0312.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12\r\nexport const STAGE_HEIGHT = 20\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () => Array(STAGE_WIDTH).fill([0, 'clear']))\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  // THIS IS SLOWER!!!\r\n  // return player.tetromino.some((row, y) =>\r\n  //   row.some((cell, x) => {\r\n  //     if (cell !== 0) {\r\n  //       return (\r\n  //         !stage[y + player.pos.y + moveY] ||\r\n  //         !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n  //         stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n  //           'clear'\r\n  //       )\r\n  //     }\r\n  //     return false\r\n  //   })\r\n  // )\r\n\r\n  // Using for loops to be able to return (and break). Not possible with forEach\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // That we're not go through bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            'clear'\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // 5. If everything above is false\r\n  return false\r\n}","import styled from 'styled-components'\r\n\r\nimport bgImage from '../../img/tetris.jpg'\r\n\r\nexport const StyledTetrisWrapper = styled.div` \r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        dislpay: block;\r\n        padding: 0 20px;\r\n    }\r\n`\r\n","export const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0, 0, 0' },\r\n    I: {\r\n      shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]],\r\n      color: '80, 227, 230',\r\n    },\r\n    J: { shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]], color: '36, 95, 223' },\r\n    L: {\r\n      shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']],\r\n      color: '223, 173, 36',\r\n    },\r\n    O: { shape: [['O', 'O'], ['O', 'O']], color: '223, 217, 36' },\r\n    S: { shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]], color: '48, 211, 56' },\r\n    T: {\r\n      shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]],\r\n      color: '132, 61, 198',\r\n    },\r\n    Z: { shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]], color: '227, 78, 78' },\r\n  }\r\n  \r\n  export const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino =\r\n      tetrominos[Math.floor(Math.random() * tetrominos.length)]\r\n    return TETROMINOS[randTetromino]\r\n  }","import { useState, useCallback } from 'react'\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos'\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers'\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  })\r\n\r\n  function rotate(matrix, dir) {\r\n    // Make the rows to become cols (transpose)\r\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]))\r\n    // Reverse each row to get a rotaded matrix\r\n    if (dir > 0) return mtrx.map(row => row.reverse())\r\n    return mtrx.reverse()\r\n  }\r\n\r\n  function playerRotate(stage, dir) {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player))\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir)\r\n\r\n    const pos = clonedPlayer.pos.x\r\n    let offset = 1\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset\r\n      offset = -(offset + (offset > 0 ? 1 : -1))\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir)\r\n        clonedPlayer.pos.x = pos\r\n        return\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer)\r\n  }\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }))\r\n  }\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    })\r\n  }, [])\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate]\r\n}","import { useState, useEffect } from 'react'\r\nimport { createStage } from '../gameHelpers'\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage())\r\n  const [rowsCleared, setRowsCleared] = useState(0)\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0)\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1)\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']))\r\n          return ack\r\n        }\r\n        ack.push(row)\r\n        return ack\r\n      }, [])\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      )\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ]\r\n          }\r\n        })\r\n      })\r\n      // Then check if we got some score if collided\r\n      if (player.collided) {\r\n        resetPlayer()\r\n        return sweepRows(newStage)\r\n      }\r\n      return newStage\r\n    }\r\n\r\n    // Here are the updates\r\n    setStage(prev => updateStage(prev))\r\n  }, [\r\n    player.collided,\r\n    player.pos.x,\r\n    player.pos.y,\r\n    player.tetromino,\r\n    resetPlayer,\r\n  ])\r\n\r\n  return [stage, setStage, rowsCleared]\r\n}","import styled from 'styled-components'\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height}, calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`","import styled from 'styled-components'\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, 0.8);\r\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n`","import React from 'react'\r\nimport { StyledCell } from './styles/StyledCell'\r\nimport { TETROMINOS } from '../tetrominos'\r\n\r\n// React.memo makes sure we only re-render the changed cells\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}>\r\n  </StyledCell>\r\n)\r\n\r\nexport default React.memo(Cell)","import React from 'react'\r\nimport { StyledStage } from './styles/StyledStage'\r\n\r\nimport Cell from './Cell'\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}    \r\n    </StyledStage>\r\n)\r\n\r\nexport default Stage","import styled from 'styled-components'\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? 'red' : '#999')};\r\n    background: #000;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 0.8rem;\r\n`","import React from 'react'\r\nimport { StyledDisplay } from './styles/StyledDisplay'\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n)\r\n\r\nexport default Display ","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color: white;\r\n    background: #333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 1rem;\r\n    outline: none;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledStartButton onClick=    {callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;","import React, { useState } from 'react'\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers'\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval'\r\nimport { usePlayer } from '../hooks/usePlayer'\r\nimport { useStage } from '../hooks/useStage'\r\nimport { useGameStatus } from '../hooks/useGameStatus'\r\n\r\n// Components\r\nimport Stage from './Stage'\r\nimport Display from './Display'\r\nimport StartButton from './StartButton'\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null)\r\n  const [gameOver, setGameOver] = useState(false)\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer()\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer)\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  )\r\n\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 })\r\n    }\r\n  }\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      // Activate the interval again when user releases down arrow.\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1))\r\n      }\r\n    }\r\n  }\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStage(createStage())\r\n    setDropTime(1000)\r\n    resetPlayer()\r\n    setScore(0)\r\n    setLevel(0)\r\n    setRows(0)\r\n    setGameOver(false)\r\n  }\r\n\r\n  const drop = () => {\r\n    // Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1)\r\n      // Also increase speed\r\n      setDropTime(1000 / (level + 1) + 200)\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false })\r\n    } else {\r\n      // Game over!\r\n      if (player.pos.y < 1) {\r\n        console.log('GAME OVER!!!')\r\n        setGameOver(true)\r\n        setDropTime(null)\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true })\r\n    }\r\n  }\r\n\r\n  const dropPlayer = () => {\r\n    // We don't need to run the interval when we use the arrow down to\r\n    // move the tetromino downwards. So deactivate it for now.\r\n    setDropTime(null)\r\n    drop()\r\n  }\r\n\r\n  // This one starts the game\r\n  // Custom hook by Dan Abramov\r\n  useInterval(() => {\r\n    drop()\r\n  }, dropTime)\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1)\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1)\r\n      } else if (keyCode === 40) {\r\n        dropPlayer()\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  )\r\n}\r\n\r\nexport default Tetris","import { useState, useEffect, useCallback } from 'react'\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0)\r\n  const [rows, setRows] = useState(0)\r\n  const [level, setLevel] = useState(0)\r\n\r\n  const linePoints = [40, 100, 300, 1200]\r\n\r\n  const calcScore = useCallback(() => {\r\n    // We have score\r\n    if (rowsCleared > 0) {\r\n      // This is how original Tetris score is calculated\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows(prev => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel]\r\n}","import { useEffect, useRef } from 'react'\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef()\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay)\n      return () => {\n        clearInterval(id)\n      };\n    }\n  }, [delay])\n}\n","import React from 'react'\nimport Tetris from './components/Tetris'\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n)\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n","module.exports = __webpack_public_path__ + \"static/media/tetris.a3d76f07.jpg\";"],"sourceRoot":""}